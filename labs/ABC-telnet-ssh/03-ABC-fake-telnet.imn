node n1 {
    type lanswitch
    network-config {
	hostname n1
	!
    }
    canvas c1
    iconcoords {69.33333333333334 144.33333333333334}
    labelcoords {69.33333333333334 168.33333333333334}
    interface-peer {e0 n5}
    interface-peer {e1 n3}
}

node n2 {
    type lanswitch
    network-config {
	hostname n2
	!
    }
    canvas c1
    iconcoords {718.0 123.66666666666666}
    labelcoords {718.0 147.66666666666666}
    interface-peer {e0 n4}
    interface-peer {e1 n6}
    interface-peer {e2 n9}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth2
	 ip address 10.10.10.1/30
	!
	interface eth0
	 ip address 10.0.0.254/24
	!
    }
    canvas c1
    iconcoords {171.66666666666669 77.0}
    labelcoords {171.66666666666669 109.0}
    interface-peer {eth0 n1}
    services {zebra RIP vtysh IPForward}
    interface-peer {eth2 n7}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth2
	 ip address 10.10.10.2/30
	 mac address 00:00:00:00:10:10
	!
	interface eth1
	 ip address 10.0.1.254/24
	!
    }
    canvas c1
    iconcoords {589.6666666666667 77.0}
    labelcoords {589.6666666666667 109.0}
    interface-peer {eth1 n2}
    services {zebra RIP vtysh IPForward}
    interface-peer {eth2 n7}
}

node n5 {
    type router
    model PC
    network-config {
	hostname Alice
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {73.5 319.6666666666667}
    labelcoords {73.5 351.6666666666667}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.254
	
	}
    }
    services {DefaultRoute}
}

node n6 {
    type router
    model host
    network-config {
	hostname Bob
	!
	interface eth0
	 ip address 10.0.1.1/24
	!
    }
    canvas c1
    iconcoords {726.3333333333333 327.8333333333333}
    labelcoords {726.3333333333333 359.8333333333333}
    interface-peer {eth0 n2}
    services {DefaultRoute SSH UserDefined}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.1.254
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('/usr/sbin/inetd /etc/inetd.conf', )
	cmddown=('killall inetd', )
	}
    }
}

node n7 {
    type router
    model PC
    network-config {
	hostname Charlie
	!
	interface eth2
	 mac address 00:00:00:00:00:3
	!
	interface eth1
	 mac address 00:00:00:00:00:2
	!
	interface eth0
	 mac address 00:00:00:00:00:1
	!
    }
    canvas c1
    iconcoords {377.0 225.0}
    labelcoords {377.0 257.0}
    services {IPForward UserDefined startup Firewall}
    interface-peer {eth0 n3}
    interface-peer {eth1 n4}
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	
	ebtables -A FORWARD -p ipv4 -i eth0 -o eth1 --ip-dst 10.0.1.1 -j DROP
	
	
	ebtables -t nat -A PREROUTING -i eth0 -p IPv4 --ip-dst 10.0.1.1 -j dnat --to-dst 00:00:00:00:10:11 
	ebtables -t nat -A PREROUTING -i eth1 -p IPv4 --ip-dst 10.0.0.1 -j dnat --to-dst 00:00:00:00:10:11 
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('start-bridge.sh', )
	cmdup=('sh start-bridge.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:start-bridge.sh
	custom-command start-bridge.sh
	config {
	ip link add name br0 type bridge
	brctl setageing 0 br0
	ip link set dev br0 up
	ip link set dev eth0 master br0
	ip link set dev eth1 master br0
	ip link set dev eth2 master br0
	brctl setageing br0 0
	}
    }
    custom-config {
	custom-config-id service:startup
	custom-command startup
	config {
	files=('startup.sh', )
	}
    }
    custom-config {
	custom-config-id service:startup:startup.sh
	custom-command startup.sh
	config {
	#!/bin/sh
	# auto-generated by Startup (startup.py)
	
	exec > startup.log 2>&1
	
	sh start-bridge.sh
	sh ipforward.sh
	sh firewall.sh
	brctl setageing 0 br0
	}
    }
    interface-peer {eth2 n8}
}

node n8 {
    type router
    model host
    network-config {
	hostname FakeBob
	!
	interface eth0
	 mac address 00:00:00:00:10:11
	 ip address 20.0.1.1/24
	!
    }
    canvas c1
    iconcoords {373.0 336.0}
    labelcoords {373.0 368.0}
    interface-peer {eth0 n7}
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	iptables -t nat -A POSTROUTING -d 10.0.1.1 -j SNAT --to-source 10.0.0.1
	iptables -t nat -A POSTROUTING -d 10.0.0.1 -j SNAT --to-source 10.0.1.1
	
	iptables -t nat -A PREROUTING -d 10.0.1.1 -j DNAT --to-destination 20.0.1.1 
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	/sbin/ip route add 10.10.10.1/32 dev eth0
	/sbin/ip route add 10.10.10.2/32 dev eth0
	/sbin/ip route add 10.0.0.0/24 via 10.10.10.1
	/sbin/ip route add 10.0.1.0/24 via 10.10.10.2
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	cmdup=('/usr/sbin/inetd /etc/inetd.conf', )
	cmddown=('killall inetd', )
	}
    }
    services {IPForward StaticRoute UserDefined Firewall}
}

node n9 {
    type router
    model host
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 10.0.1.2/24
	!
    }
    canvas c1
    iconcoords {838.0 321.0}
    labelcoords {838.0 353.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.1.254
	
	}
    }
    services {DefaultRoute SSH}
}

link l1 {
    nodes {n5 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l4 {
    nodes {n4 n2}
    bandwidth 0
}

link l5 {
    nodes {n2 n6}
    bandwidth 0
}

link l6 {
    nodes {n3 n7}
    bandwidth 0
}

link l7 {
    nodes {n7 n4}
    bandwidth 0
}

link l3 {
    nodes {n7 n8}
    bandwidth 0
}

link l8 {
    nodes {n2 n9}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

traffic {
    {flow 1 from n5 to n6} 1 0.0 10.0 n5 n6 10.0.0.20 5000 {} 10.0.2.10 5000 /var/log/mgen1.log UDP {} {PERIODIC [10.0 125]} {}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
    controlnet=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

