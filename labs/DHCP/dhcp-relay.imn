node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth2
	 ip address 192.168.2.1/24
	 ipv6 address a:0::1/64
	!
	interface eth1
	 ip address 192.168.1.1/24
	!
	interface eth0
	 ip address 192.168.0.1/24
	!
    }
    canvas c1
    iconcoords {274.0 101.0}
    labelcoords {274.0 133.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:startup
	custom-command startup
	config {
	files=('startup.sh', )
	}
    }
    custom-config {
	custom-config-id service:startup:startup.sh
	custom-command startup.sh
	config {
	#!/bin/sh
	# auto-generated by Startup (startup.py)
	
	exec > startup.log 2>&1
	
	sh ipforward.sh
	sh quaggaboot.sh zebra
	sh firewall.sh
	/usr/sbin/dhcrelay 192.168.1.10
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	iptables -t mangle -A OUTPUT -p udp -m udp --dport 67 -j CHECKSUM --checksum-fill
	
	}
    }
    services {IPForward startup Firewall}
    interface-peer {eth2 n5}
}

node n2 {
    type hub
    network-config {
	hostname n2
	!
    }
    canvas c1
    iconcoords {189.0 181.0}
    labelcoords {189.0 205.0}
    interface-peer {e0 n4}
    interface-peer {e1 n1}
}

node n3 {
    type router
    model host
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 192.168.1.10/24
	!
    }
    canvas c1
    iconcoords {97.0 52.0}
    labelcoords {97.0 84.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 192.168.1.0 netmask 255.255.255.0 {
	  pool {
	    range 192.168.1.127 192.168.1.254;
	    default-lease-time 600;
	    option routers 192.168.1.10;
	  }
	}
	subnet 192.168.0.0 netmask 255.255.255.0 {
	  pool {
	    range 192.168.0.127 192.168.0.254;
	    default-lease-time 600;
	    option routers 192.168.0.1;
	  }
	}
	subnet 192.168.2.0 netmask 255.255.255.0 {
	  pool {
	    range 192.168.2.127 192.168.2.254;
	    default-lease-time 600;
	    option routers 192.168.2.1;
	  }
	}
	
	
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	iptables -t mangle -A OUTPUT -p udp -m udp --dport 67 -j CHECKSUM --checksum-fill
	}
    }
    services {DefaultRoute SSH DHCP Firewall}
}

node n4 {
    type router
    model PC
    network-config {
	hostname n4
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {56.0 186.0}
    labelcoords {56.0 218.0}
    interface-peer {eth0 n2}
    services {DefaultRoute DHCPClient}
}

node n5 {
    type lanswitch
    network-config {
	hostname n5
	!
    }
    canvas c1
    iconcoords {296.0 378.0}
    labelcoords {296.0 402.0}
    interface-peer {e0 n1}
    interface-peer {e1 n6}
}

node n6 {
    type router
    model PC
    network-config {
	hostname n6
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {104.0 387.0}
    labelcoords {104.0 419.0}
    interface-peer {eth0 n5}
    services {DefaultRoute DHCPClient}
}

link l1 {
    nodes {n4 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n1}
    bandwidth 0
}

link l3 {
    nodes {n1 n3}
    bandwidth 0
}

link l4 {
    nodes {n1 n5}
    bandwidth 0
}

link l5 {
    nodes {n6 n5}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

