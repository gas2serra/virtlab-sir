node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth4
	 ip address 192.168.1.254/24
	!
	interface eth3
	 ip address 10.0.1.1/30
	!
	interface eth1
	 ip address 192.168.3.1/24
	!
	interface eth2
	 ip address 192.168.2.1/24
	!
	interface eth0
	 ip address 192.168.0.1/24
	!
    }
    canvas c1
    iconcoords {385.0 213.0}
    labelcoords {385.0 245.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:DHCPRelay
	custom-command DHCPRelay
	config {
	files=('dhcp-relay.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPRelay:dhcp-relay.sh
	custom-command dhcp-relay.sh
	config {
	#!/bin/sh
	#/usr/sbin/dhcrelay <dhcp server>
	
	/usr/sbin/dhcrelay 192.168.3.10
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	iptables -t mangle -A OUTPUT -p udp -m udp --dport 67 -j CHECKSUM --checksum-fill
	
	}
    }
    services {Firewall IPForward zebra RIP DHCPRelay}
    interface-peer {eth2 n5}
    interface-peer {eth1 n11}
    interface-peer {eth3 n12}
    interface-peer {eth4 n19}
}

node n2 {
    type hub
    network-config {
	hostname n2
	!
    }
    canvas c1
    iconcoords {234.0 84.0}
    labelcoords {234.0 108.0}
    interface-peer {e0 n4}
    interface-peer {e1 n1}
    interface-peer {e2 n7}
}

node n3 {
    type router
    model host
    network-config {
	hostname dhcp
	!
	interface eth0
	 ip address 192.168.3.10/24
	!
    }
    canvas c1
    iconcoords {97.0 502.0}
    labelcoords {97.0 534.0}
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 192.168.3.0 netmask 255.255.255.0 {
	  pool {
	    range 192.168.3.127 192.168.3.254;
	    default-lease-time 600;
	    option routers 192.168.3.10;
	  }
	}
	subnet 192.168.0.0 netmask 255.255.255.0 {
	  pool {
	    range 192.168.0.127 192.168.0.254;
	    default-lease-time 600;
	    option routers 192.168.0.1;
	  }
	}
	subnet 192.168.2.0 netmask 255.255.255.0 {
	  pool {
	    range 192.168.2.127 192.168.2.254;
	    default-lease-time 600;
	    option routers 192.168.2.1;
	  }
	}
	
	
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	iptables -t mangle -A OUTPUT -p udp -m udp --dport 67 -j CHECKSUM --checksum-fill
	}
    }
    services {Firewall SSH DHCP DefaultRoute}
    interface-peer {eth0 n11}
}

node n4 {
    type router
    model PC
    network-config {
	hostname n4
	!
	interface eth0
	 ip address 192.168.0.20/24
	!
    }
    canvas c1
    iconcoords {89.0 77.0}
    labelcoords {89.0 109.0}
    interface-peer {eth0 n2}
    services {startup DefaultRoute}
    custom-config {
	custom-config-id service:startup
	custom-command startup
	config {
	files=('startup.sh', )
	}
    }
    custom-config {
	custom-config-id service:startup:startup.sh
	custom-command startup.sh
	config {
	#!/bin/sh
	# auto-generated by Startup (startup.py)
	
	exec > startup.log 2>&1
	
	sh startdhcpclient.sh
	sh defaultroute.sh
	export DISPLAY=":0.0"
	}
    }
}

node n5 {
    type lanswitch
    network-config {
	hostname n5
	!
    }
    canvas c1
    iconcoords {227.0 289.0}
    labelcoords {227.0 313.0}
    interface-peer {e0 n1}
    interface-peer {e1 n6}
    interface-peer {e2 n8}
}

node n6 {
    type router
    model PC
    network-config {
	hostname n6
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {82.0 275.0}
    labelcoords {82.0 307.0}
    interface-peer {eth0 n5}
    services {DefaultRoute DHCPClient}
}

node n7 {
    type router
    model PC
    network-config {
	hostname n7
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {167.0 122.0}
    labelcoords {167.0 154.0}
    interface-peer {eth0 n2}
    services {startup DHCPClient DefaultRoute}
    custom-config {
	custom-config-id service:startup
	custom-command startup
	config {
	files=('startup.sh', )
	}
    }
    custom-config {
	custom-config-id service:startup:startup.sh
	custom-command startup.sh
	config {
	#!/bin/sh
	# auto-generated by Startup (startup.py)
	
	exec > startup.log 2>&1
	
	sh startdhcpclient.sh
	sh defaultroute.sh
	export DISPLAY=":0.0"
	}
    }
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {122.0 320.0}
    labelcoords {122.0 352.0}
    interface-peer {eth0 n5}
    services {DHCPClient DefaultRoute}
}

node n9 {
    type router
    model host
    network-config {
	hostname proxy
	!
	interface eth0
	 ip address 192.168.3.11/24
	!
    }
    canvas c1
    iconcoords {256.0 505.0}
    labelcoords {256.0 537.0}
    services {SSH DefaultRoute Proxy}
    interface-peer {eth0 n11}
    custom-config {
	custom-config-id service:Proxy
	custom-command Proxy
	config {
	files=('proxy.sh', '/etc/squid3/squid.conf', '/etc/squid3/msntauth.conf', '/etc/squid3/errorpage.css', )
	}
    }
    custom-config {
	custom-config-id service:Proxy:/etc/squid3/squid.conf
	custom-command /etc/squid3/squid.conf
	config {
	#!/bin/sh
	# auto-generated 
	#Recommended minimum configuration:
	#acl manager proto cache_object
	acl localhost src 127.0.0.1/32
	acl to_localhost dst 127.0.0.0/8
	acl localnet src 0.0.0.0/8 192.168.100.0/24 192.168.101.0/24
	acl SSL_ports port 443
	acl Safe_ports port 80		# http
	acl Safe_ports port 21		  # ftp
	acl Safe_ports port 443		    # https
	acl Safe_ports port 70		      # gopher
	acl Safe_ports port 210		      	# wais
	acl Safe_ports port 1025-65535		# unregistered ports
	acl Safe_ports port 280			  # http-mgmt
	acl Safe_ports port 488			    # gss-http
	acl Safe_ports port 591			  # filemaker
	acl Safe_ports port 777			  	# multiling http
	
	acl CONNECT method CONNECT
	 
	http_access allow manager localhost
	http_access deny manager
	http_access deny !Safe_ports
	
	http_access deny to_localhost
	icp_access deny all
	htcp_access deny all
	
	#http_port 3128
	http_port 8080
	hierarchy_stoplist cgi-bin ?
	access_log /var/log/squid3/access.log squid
	#Suggested default:
	refresh_pattern ^ftp:		1440	20%	10080
	refresh_pattern ^gopher:	1440	0%	1440
	refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
	refresh_pattern .  		  0 20%	4320
	# Leave coredumps in the first cache dir
	coredump_dir /var/spool/squid3
	# Allow all machines to all sites
	http_access allow all
	}
    }
}

node n10 {
    type router
    model host
    network-config {
	hostname web
	!
	interface eth0
	 ip address 192.168.3.12/24
	!
    }
    canvas c1
    iconcoords {498.0 504.0}
    labelcoords {498.0 536.0}
    services {SSH HTTP DefaultRoute}
    interface-peer {eth0 n11}
}

node n11 {
    type lanswitch
    network-config {
	hostname n11
	!
    }
    canvas c1
    iconcoords {369.0 348.0}
    labelcoords {369.0 372.0}
    interface-peer {e0 n1}
    interface-peer {e1 n3}
    interface-peer {e2 n9}
    interface-peer {e3 n10}
}

node n12 {
    type router
    model router
    network-config {
	hostname n12
	!
	interface eth2
	 ip address 192.168.11.1/24
	!
	interface eth1
	 ip address 192.168.10.1/24
	!
	interface eth0
	 ip address 10.0.1.2/30
	!
    }
    canvas c1
    iconcoords {535.0 95.0}
    labelcoords {535.0 127.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n13}
    interface-peer {eth2 n14}
    services {IPForward zebra RIP}
}

node n13 {
    type lanswitch
    network-config {
	hostname n13
	!
    }
    canvas c1
    iconcoords {712.0 292.0}
    labelcoords {712.0 316.0}
    interface-peer {e0 n12}
    interface-peer {e1 n15}
    interface-peer {e2 n17}
}

node n14 {
    type lanswitch
    network-config {
	hostname n14
	!
    }
    canvas c1
    iconcoords {699.0 98.0}
    labelcoords {699.0 122.0}
    interface-peer {e0 n12}
    interface-peer {e1 n16}
}

node n15 {
    type router
    model host
    network-config {
	hostname rweb
	!
	interface eth0
	 ip address 192.168.10.10/24
	!
    }
    canvas c1
    iconcoords {885.0 258.0}
    labelcoords {885.0 290.0}
    interface-peer {eth0 n13}
    services {SSH HTTP DefaultRoute}
}

node n16 {
    type router
    model PC
    network-config {
	hostname n16
	!
	interface eth0
	 ip address 192.168.11.20/24
	!
    }
    canvas c1
    iconcoords {850.0 97.0}
    labelcoords {850.0 129.0}
    interface-peer {eth0 n14}
    custom-config {
	custom-config-id service:startup
	custom-command startup
	config {
	files=('startup.sh', )
	}
    }
    custom-config {
	custom-config-id service:startup:startup.sh
	custom-command startup.sh
	config {
	#!/bin/sh
	# auto-generated by Startup (startup.py)
	
	exec > startup.log 2>&1
	
	sh defaultroute.sh
	export DISPLAY=":0.0"
	}
    }
    services {startup DefaultRoute}
}

node n17 {
    type router
    model host
    network-config {
	hostname telnet-server
	!
	interface eth0
	 ip address 192.168.10.11/24
	!
    }
    canvas c1
    iconcoords {862.0 333.0}
    labelcoords {862.0 365.0}
    interface-peer {eth0 n13}
    services {SSH DefaultRoute Telnet}
}

node n18 {
    type router
    model host
    network-config {
	hostname dns
	!
	interface eth0
	 ip address 192.168.1.1/24
	!
    }
    canvas c1
    iconcoords {587.0 371.0}
    labelcoords {587.0 403.0}
    interface-peer {eth0 n19}
    services {SSH DefaultRoute Dns}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 192.168.1.254
	}
    }
}

node n19 {
    type lanswitch
    network-config {
	hostname n19
	!
    }
    canvas c1
    iconcoords {528.0 268.0}
    labelcoords {528.0 292.0}
    interface-peer {e0 n1}
    interface-peer {e1 n18}
}

link l1 {
    nodes {n4 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n1}
    bandwidth 0
}

link l4 {
    nodes {n1 n5}
    bandwidth 0
}

link l5 {
    nodes {n6 n5}
    bandwidth 0
}

link l6 {
    nodes {n7 n2}
    bandwidth 0
}

link l7 {
    nodes {n8 n5}
    bandwidth 0
}

link l3 {
    nodes {n1 n11}
    bandwidth 0
}

link l11 {
    nodes {n1 n12}
    bandwidth 0
}

link l8 {
    nodes {n11 n3}
    bandwidth 0
}

link l9 {
    nodes {n11 n9}
    bandwidth 0
}

link l10 {
    nodes {n11 n10}
    bandwidth 0
}

link l12 {
    nodes {n12 n13}
    bandwidth 0
}

link l13 {
    nodes {n13 n15}
    bandwidth 0
}

link l14 {
    nodes {n12 n14}
    bandwidth 0
}

link l15 {
    nodes {n14 n16}
    bandwidth 0
}

link l16 {
    nodes {n13 n17}
    bandwidth 0
}

link l17 {
    nodes {n1 n19}
    bandwidth 0
}

link l18 {
    nodes {n19 n18}
    bandwidth 0
}

annotation a1 {
    iconcoords {31 424 651 554}
    type rectangle
    label {Servers}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #f6c0ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {49.0 32.0 302.0 144.0}
    type oval
    label {Rete Ricerca}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cfcf28
    width 0
    border black
    canvas c1
}

annotation a3 {
    iconcoords {37.0 223.0 305.0 357.0}
    type oval
    label {Rete Amministrazione}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #cfcf49
    width 0
    border black
    canvas c1
}

annotation a4 {
    iconcoords {629 194 943 375}
    type oval
    label {Server Remoto}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c3b8f4
    width 0
    border black
    canvas c1
}

annotation a5 {
    iconcoords {633 25 900 173}
    type oval
    label {Client Remoto}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #CFCFFF
    width 0
    border black
    canvas c1
}

annotation a6 {
    iconcoords {469 300 619 409}
    type rectangle
    label {DNS}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #dbc8ff
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

