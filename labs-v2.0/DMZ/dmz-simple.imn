node n1 {
    type router
    model PC
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 192.168.0.20/24
	!
    }
    canvas c1
    iconcoords {64.0 311.0}
    labelcoords {64.0 343.0}
    interface-peer {eth0 n4}
}

node n2 {
    type router
    model host
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 192.168.1.10/24
	!
    }
    canvas c1
    iconcoords {140.0 73.0}
    labelcoords {140.0 105.0}
    interface-peer {eth0 n3}
    services {DefaultRoute SSH HTTP}
}

node n3 {
    type lanswitch
    network-config {
	hostname n3
	!
    }
    canvas c1
    iconcoords {226.0 139.0}
    labelcoords {226.0 163.0}
    interface-peer {e0 n2}
    interface-peer {e1 n5}
}

node n4 {
    type lanswitch
    network-config {
	hostname n4
	!
    }
    canvas c1
    iconcoords {109.0 230.0}
    labelcoords {109.0 254.0}
    interface-peer {e0 n1}
    interface-peer {e1 n5}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth3
	 ip address 192.168.2.1/24
	!
	interface eth2
	 ip address 172.16.1.1/24
	!
	interface eth1
	 ip address 192.168.0.1/24
	!
	interface eth0
	 ip address 192.168.1.1/24
	!
    }
    canvas c1
    iconcoords {289.0 249.0}
    labelcoords {289.0 281.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n4}
    services {IPForward DefaultRoute UserDefined Firewall}
    interface-peer {eth2 n9}
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('firewall.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:firewall.sh
	custom-command firewall.sh
	config {
	#!/bin/sh
	# custom node firewall rules for service (security.py)
	# -------- CUSTOMIZATION REQUIRED --------
	#
	# Below are sample iptables firewall rules that you can uncomment and edit.
	# You can also use ip6tables rules for IPv6.
	#
	
	# start by flushing all firewall rules (so this script may be re-run)
	#iptables -F
	
	# allow traffic related to established connections
	#iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# allow TCP packets from any source destined for 192.168.1.1
	#iptables -A INPUT -s 0/0 -i eth0 -d 192.168.1.1  -p TCP -j ACCEPT
	
	# allow OpenVPN server traffic from eth0
	#iptables -A INPUT -p udp --dport 1194 -j ACCEPT
	#iptables -A INPUT -i eth0 -j DROP
	#iptables -A OUTPUT -p udp --sport 1194 -j ACCEPT
	#iptables -A OUTPUT -o eth0 -j DROP
	
	# allow ICMP ping traffic
	#iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
	#iptables -A INPUT  -p icmp --icmp-type echo-reply   -j ACCEPT
	
	# allow SSH traffic
	#iptables -A -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
	
	# drop all other traffic coming in eth0
	#iptables -A INPUT -i eth0 -j DROP
	
	iptables -t nat -A POSTROUTING -o eth2 -p tcp -j MASQUERADE --to-ports 1024-31000
	iptables -t nat -A POSTROUTING -o eth2 -p udp -j MASQUERADE --to-ports 1024-31000
	iptables -t nat -A POSTROUTING -o eth2 -j MASQUERADE 
	
	
	
	iptables -t nat -A PREROUTING -i eth2 -p tcp --dport 22 -j DNAT --to-destination 192.168.1.10 
	iptables -t nat -A PREROUTING -i eth2 -p tcp --dport 23 -j DNAT --to-destination 192.168.1.10 
	iptables -t nat -A PREROUTING -i eth2 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.10 
	
	iptables -A FORWARD -d 192.168.1.0/24 -j ACCEPT
	iptables -A FORWARD -s 192.168.1.0/24 -j ACCEPT
	iptables -A FORWARD -j TEE --gateway 192.168.2.10
	iptables -A FORWARD -j DROP
	
	#iptables -t mangle -A FORWARD -j TEE --gateway 192.168.2.10
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/log/ulog', )
	cmdup=('/etc/init.d/rsyslog start', '/etc/init.d/ulogd2 start', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 172.16.1.2
	
	}
    }
    interface-peer {eth3 n10}
}

node n6 {
    type lanswitch
    network-config {
	hostname n6
	!
    }
    canvas c1
    iconcoords {666.0 239.0}
    labelcoords {666.0 263.0}
    interface-peer {e0 n8}
    interface-peer {e1 n7}
    interface-peer {e2 n9}
}

node n7 {
    type router
    model host
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 172.16.0.10/24
	!
    }
    canvas c1
    iconcoords {790.0 307.0}
    labelcoords {790.0 339.0}
    interface-peer {eth0 n6}
    services {DefaultRoute SSH HTTP}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 172.16.0.20/24
	!
    }
    canvas c1
    iconcoords {786.0 147.0}
    labelcoords {786.0 179.0}
    interface-peer {eth0 n6}
}

node n9 {
    type router
    model router
    network-config {
	hostname n9
	!
	interface eth1
	 ip address 172.16.1.2/24
	!
	interface eth0
	 ip address 172.16.0.1/24
	!
    }
    canvas c1
    iconcoords {514.0 245.0}
    labelcoords {514.0 277.0}
    interface-peer {eth0 n6}
    interface-peer {eth1 n5}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 172.16.0.1
	/sbin/ip route add 192.168.1.0/24 via 172.16.1.1
	/sbin/ip route add 192.168.0.0/24 via 172.16.1.1
	
	}
    }
    services {zebra OSPFv2 OSPFv3 IPForward StaticRoute}
}

node n10 {
    type router
    model host
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 192.168.2.10/24
	!
    }
    canvas c1
    iconcoords {282.0 343.0}
    labelcoords {282.0 375.0}
    interface-peer {eth0 n5}
}

link l1 {
    nodes {n1 n4}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

link l3 {
    nodes {n5 n3}
    bandwidth 0
}

link l4 {
    nodes {n5 n4}
    bandwidth 0
}

link l5 {
    nodes {n6 n8}
    bandwidth 0
}

link l6 {
    nodes {n6 n7}
    bandwidth 0
}

link l7 {
    nodes {n9 n6}
    bandwidth 0
}

link l8 {
    nodes {n5 n9}
    bandwidth 0
}

link l9 {
    nodes {n5 n10}
    bandwidth 0
}

annotation a2 {
    iconcoords {3 2 385 372}
    type rectangle
    label {LAN}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #6ec0ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {60 29 330 198}
    type rectangle
    label {DMZ}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #d6a3ff
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

